/*
 * Copyright (c) 2012, the authors.
 *
 *    This file is part of Circo.
 *
 *    Circo is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Circo is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Circo.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * Circo application build file
 *
 * @author Paolo Di Tommaso
 *
 */

apply plugin: 'groovy'
//name = 'circo'
version = '0.2.0'
status = 'alpha'

repositories {
    flatDir(dirs: file('local-lib'))
    mavenCentral()
    maven {
        url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-uploads'
    }
}

dependencies {
    groovy module ('org.codehaus.groovy:groovy-all:2.0.6') {
        transitive = true
    }
    //compile ( 'org.infinispan:infinispan-core:5.1.7.Final' )
    compile ( 'com.hazelcast:hazelcast:2.5',

              'com.typesafe.akka:akka-actor_2.10:2.1.0',
              'com.typesafe.akka:akka-remote_2.10:2.1.0',
              'com.typesafe.akka:akka-cluster-experimental_2.10:2.1.0',
              'com.typesafe.akka:akka-transactor_2.10:2.1.0',

              'org.slf4j:slf4j-api:1.6.6',
              'org.slf4j:jcl-over-slf4j:1.6.6',
              'org.slf4j:jul-to-slf4j:1.6.6',
              'org.slf4j:log4j-over-slf4j:1.6.6',
              'ch.qos.logback:logback-classic:1.0.7',
              'ch.qos.logback:logback-core:1.0.7',
              'com.typesafe.akka:akka-slf4j_2.10:2.1.0',

              'commons-lang:commons-lang:2.6',
              'com.google.guava:guava:13.0.1',
              'com.beust:jcommander:1.30',
              'jline:jline:2.9',
              'org.fusesource.jansi:jansi:1.9',
              'net.java.dev.jna:jna:3.5.1',
              'net.java.dev.jna:platform:3.5.1',
              'c3p0:c3p0:0.9.1.2'
              )

    compile ( 'org.hyperic:sigar:1.6.5.132' ) {
        exclude module: 'log4j'
    }

    runtime ( 'com.h2database:h2:1.3.170' )

    testCompile ( 'com.typesafe.akka:akka-testkit_2.10:2.1.0',
                  'org.spockframework:spock-core:0.7-groovy-2.0')

    testRuntime ( 'com.h2database:h2:1.3.170' )


}

/*
 * print out the runtime classpath
 */
task classpathRuntime(dependsOn: configurations.runtime) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}

/*
 * print out the compile classpath
 */
task classpathCompile(dependsOn: configurations.compile) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}


/*
 * Update the build timestamp in the source source file
 */
task buildInfo << {
    def numFile = new File('./.buildnum')
    if( !numFile.exists() ) numFile.createNewFile()
    def buildNum = (numFile.text ?: '0').toInteger() +1
    numFile.text =  buildNum

    def file = new File('./src/main/groovy/circo/Consts.groovy')
    def src = file.text
    src = src.replaceAll('APP_VER *= *"[0-9\\.]+"', "APP_VER = \"${version}\"" as String)
    src = src.replaceAll('APP_TIMESTAMP *= *[0-9]*', "APP_TIMESTAMP = ${System.currentTimeMillis()}" as String)
    src = src.replaceAll('APP_BUILDNUM *= *[0-9]*', "APP_BUILDNUM = ${buildNum}" as String)
    file.text = src
}

/*
 * Compile sources and copies all libs to target directory
 */
task compile(type: Copy) {
    dependsOn buildInfo, compileJava, compileGroovy, processResources

    into "$buildDir/dependency-libs"
    from configurations.runtime
}


/*
 * Create the distribution stage folder i.e. creates a folder containing everythinh
 * have to be included in the distribution package
 */

task stage( type: Copy ) {
    dependsOn jar, javadoc, groovydoc

    // clean the target directory before create
    def target = file("$buildDir/stage/circo-$version")
    target.parentFile.deleteDir()
    target.mkdirs()

    destinationDir target

    // copy the bin scripts
    into('bin') {
        from ('./bin') { exclude 'circo' }
        rename { String fileName -> fileName.replace('circo.sh', 'circo') }
    }

    // copy application - and - runtime dependencies jars
    into('libs') {
        from "$buildDir/libs/circo-${version}.jar"
        from configurations.runtime
    }

    // still some stuff
    into('conf') { from './src/main/resources' }
    into('libsigar') { from 'libsigar' }
    into('src') { from './src/main' }
    into('docs') { from '$buildDir/docs/groovydoc/'}

}

/*
 * Creates the Zip distribution file
 */
task distZip(type: Zip) {
    dependsOn stage
    from "$buildDir/stage/"
}

/*
 * creates the Tar distribution file
 */
task distTar(type: Tar) {
    dependsOn stage
    compression = Compression.GZIP
    from "$buildDir/stage/"
}

task dist() {
    dependsOn distZip, distTar
}

/*
 * Print the distribution file name when distXxx task completes
 */
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task == distTar && !state.failure) { println "\n** TAR: ${relativePath(distTar.archivePath)}\n\n"}
    if (task == distZip && !state.failure) { println "\n** ZIP: ${relativePath(distZip.archivePath)}\n\n"}
}

task s3publish(type: Exec) {
    dependsOn dist

    commandLine "s3cmd --acl-public -rr --disable-multipart put ${buildDir}/distributions/circo-${version}.tgz s3://cbcrg-eu".split(' ')

}




// __ useful stuff __
//println dist.archiveName
//println relativePath(dist.destinationDir)
//println relativePath(dist.archivePath)
//
// Read more here
// http://www.gradle.org/docs/current/userguide/groovy_plugin.html
// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
// http://www.gradle.org/docs/current/userguide/dependency_management.html
//
// Useful links
// http://stackoverflow.com/questions/12305191/compile-java-project-without-using-gradles-java-plugin
// http://stackoverflow.com/questions/11428954/gradle-zip-packaging-copy-jar-file-from-repository
//
//
// gradle project properties -- http://gradle.org/docs/current/userguide/writing_build_scripts.html
//
// -- see copy here http://gradle.org/docs/current/dsl/org.gradle.api.tasks.Copy.html
//    http://gradle.org/docs/current/userguide/working_with_files.html
